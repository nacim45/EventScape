trigger: none

resources:
  pipelines:
  - pipeline: build_pipeline
    source: "nacim45.EventScape (10)"
    trigger: true

variables:
  acrName: 'eventbookingcontainer'
  imageName: 'nacimeventscape'
  resourceGroup: 'EventBooking'
  appServiceName: 'EventScapeApp'
  azureServiceConnection: 'eventbooking'

stages:
- stage: Deploy
  displayName: Deploy to Web App
  jobs:
  - job: Deploy
    displayName: Update Web App Container
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # Step 1: Verify all resources exist
    - task: AzureCLI@2
      displayName: Validate Azure Resources
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Checking Web App exists..."
          az webapp show --name $(appServiceName) --resource-group $(resourceGroup)
          
          echo "Checking ACR exists..."
          az acr show --name $(acrName) --resource-group $(resourceGroup)
          
          echo "Checking image exists..."
          az acr repository show --name $(acrName) --repository $(imageName)

    # Step 2: Get the latest image tag
    - bash: |
        latestTag=$(az acr repository show-tags \
          --name $(acrName) \
          --repository $(imageName) \
          --orderby time_desc \
          --query '[0]' \
          --output tsv)
        echo "##vso[task.setvariable variable=imageTag]$latestTag"
        echo "Using tag: $latestTag"
      displayName: Get Latest ACR Image Tag

    # Step 3: Deploy using Azure CLI (more reliable than AzureWebAppContainer)
    - task: AzureCLI@2
      displayName: Deploy Container to Web App
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          # First update container configuration
          echo "Updating container settings..."
          az webapp config container set \
            --name $(appServiceName) \
            --resource-group $(resourceGroup) \
            --docker-custom-image-name $(acrName).azurecr.io/$(imageName):$(imageTag) \
            --docker-registry-server-url https://$(acrName).azurecr.io
          
          # Then update app settings separately
          echo "Updating application settings..."
          az webapp config appsettings set \
            --name $(appServiceName) \
            --resource-group $(resourceGroup) \
            --settings DOCKER_ENABLE_CI=true
          
          # Force restart
          echo "Restarting web app..."
          az webapp restart --name $(appServiceName) --resource-group $(resourceGroup)
          echo "Deployment completed successfully!"