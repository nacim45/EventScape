# Alternative Docker Build Pipeline
# This is an alternative pipeline for building and pushing to a different ACR

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection (USING WORKING SERVICE CONNECTION)
  dockerRegistryServiceConnection: '0cd9c5eb-75a8-4b7d-97c5-a719ac7c1944'  # Working service connection ID from pipeline 1
  imageRepository: 'nacimeventscape'
  containerRegistry: 'eventcontainertest.azurecr.io'  # Matching ACR for this service connection
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and Push to Alternative ACR
  jobs:
  - job: Build
    displayName: Build and Push
    pool:
      vmImage: $(vmImageName)
    steps:
    
    # Verify Dockerfile exists
    - script: |
        echo "=== PIPELINE 3 - ALTERNATIVE ACR BUILD ==="
        echo "Checking repository structure:"
        ls -la $(Build.SourcesDirectory)
        echo "Verifying Dockerfile exists:"
        if [ -f "$(Build.SourcesDirectory)/Dockerfile" ]; then
          echo "✅ Dockerfile found"
        else
          echo "❌ Dockerfile missing"
          exit 1
        fi
        echo "Target registry: $(containerRegistry)"
        echo "Image repository: $(imageRepository)"
        echo "Build tag: $(tag)"
      displayName: 'Verify Build Environment'
    
    # Test service connection before build
    - script: |
        echo "=== TESTING SERVICE CONNECTION ==="
        echo "Service Connection ID: $(dockerRegistryServiceConnection)"
        echo "Target Registry: $(containerRegistry)"
        echo "Repository: $(imageRepository)"
        echo "This should match your Azure DevOps service connection configuration"
      displayName: 'Pre-build Service Connection Check'

    # Build and push to alternative ACR with enhanced error handling
    - task: Docker@2
      displayName: 'Build and push to alternative ACR'
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
      continueOnError: false
      retryCountOnTaskFailure: 1
    
    # Display success information
    - script: |
        echo "=== BUILD SUCCESSFUL ==="
        echo "Image pushed to: $(containerRegistry)/$(imageRepository):$(tag)"
        echo "Latest tag also created: $(containerRegistry)/$(imageRepository):latest"
        echo "You can now use this image for deployment"
      displayName: 'Build Success Information'
