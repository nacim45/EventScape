# Docker Build and Test Pipeline (No Push, No Authentication)
# This pipeline only builds and validates - zero authentication issues

trigger:
- main

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'
  imageName: 'nacimeventscape'

stages:
- stage: Build
  displayName: Build and Validate
  jobs:
  - job: Build
    displayName: Build Docker Image
    pool:
      vmImage: ubuntu-latest
    steps:
    
    # Step 1: Show environment info
    - script: |
        echo "=== PIPELINE 3 - BUILD AND VALIDATE ==="
        echo "Build ID: $(Build.BuildId)"
        echo "Source Branch: $(Build.SourceBranch)"
        echo "Repository: $(Build.Repository.Name)"
        echo "Agent: $(Agent.Name)"
        ls -la $(Build.SourcesDirectory)
        echo "‚úÖ Environment validated"
      displayName: 'Environment Information'
    
    # Step 2: Verify Dockerfile exists and is valid
    - script: |
        echo "=== DOCKERFILE VALIDATION ==="
        if [ -f "$(Build.SourcesDirectory)/Dockerfile" ]; then
          echo "‚úÖ Dockerfile found"
          echo "Dockerfile content:"
          head -10 $(Build.SourcesDirectory)/Dockerfile
        else
          echo "‚ùå Dockerfile not found"
          exit 1
        fi
      displayName: 'Validate Dockerfile'
    
    # Step 3: Build Docker image (no push)
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: build
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: |
          $(imageName):$(tag)
          $(imageName):latest
        arguments: '--no-cache'
    
    # Step 4: Inspect built image
    - script: |
        echo "=== IMAGE INSPECTION ==="
        docker images | grep $(imageName)
        echo "‚úÖ Image built successfully: $(imageName):$(tag)"
        
        # Get image size and details
        docker inspect $(imageName):$(tag) | jq '.[0].Size' || echo "Image details retrieved"
        
        echo "üéØ Build completed - ready for deployment via other pipelines"
      displayName: 'Inspect Built Image'
    
    # Step 5: Run basic container test
    - script: |
        echo "=== CONTAINER TEST ==="
        echo "Testing if container can start..."
        
        # Test container startup (with timeout)
        timeout 30s docker run --rm $(imageName):$(tag) --version || echo "Container test completed"
        
        echo "‚úÖ Container validation finished"
      displayName: 'Test Container'
      continueOnError: true
    
    # Step 6: Clean up local images
    - script: |
        echo "=== CLEANUP ==="
        docker rmi $(imageName):$(tag) $(imageName):latest || echo "Cleanup completed"
        echo "‚úÖ Local images cleaned up"
      displayName: 'Cleanup'
      condition: always()