# Alternative Docker Build Pipeline
# This is an alternative pipeline for building and pushing to a different ACR

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection (USING WORKING SERVICE CONNECTION)
  dockerRegistryServiceConnection: '0cd9c5eb-75a8-4b7d-97c5-a719ac7c1944'  # Working service connection ID from pipeline 1
  imageRepository: 'nacimeventscape'
  containerRegistry: 'eventcontainertest.azurecr.io'  # Matching ACR for this service connection
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and Push to Alternative ACR
  jobs:
  - job: Build
    displayName: Build and Push
    pool:
      vmImage: $(vmImageName)
    steps:
    
    # Verify Dockerfile exists
    - script: |
        echo "=== PIPELINE 3 - ALTERNATIVE ACR BUILD ==="
        echo "Checking repository structure:"
        ls -la $(Build.SourcesDirectory)
        echo "Verifying Dockerfile exists:"
        if [ -f "$(Build.SourcesDirectory)/Dockerfile" ]; then
          echo "‚úÖ Dockerfile found"
        else
          echo "‚ùå Dockerfile missing"
          exit 1
        fi
        echo "Target registry: $(containerRegistry)"
        echo "Image repository: $(imageRepository)"
        echo "Build tag: $(tag)"
      displayName: 'Verify Build Environment'
    
    # Test service connection before build
    - script: |
        echo "=== TESTING SERVICE CONNECTION ==="
        echo "Service Connection ID: $(dockerRegistryServiceConnection)"
        echo "Target Registry: $(containerRegistry)"
        echo "Repository: $(imageRepository)"
        echo "This should match your Azure DevOps service connection configuration"
      displayName: 'Pre-build Service Connection Check'

    # Build Docker image locally first
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: build
        dockerfile: $(dockerfilePath)
        tags: |
          $(containerRegistry)/$(imageRepository):$(tag)
          $(containerRegistry)/$(imageRepository):latest
    
    # Use Azure CLI to push to ACR (more reliable authentication)
    - task: AzureCLI@2
      displayName: 'Push to ACR using Azure CLI'
      inputs:
        azureSubscription: 'eventbooking'  # Use your ARM service connection
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "=== AZURE CLI ACR PUSH ==="
          
          # Extract ACR name from registry URL
          ACR_NAME=$(echo "$(containerRegistry)" | cut -d'.' -f1)
          echo "ACR Name: $ACR_NAME"
          echo "Full Registry: $(containerRegistry)"
          
          # Login to ACR using Azure CLI (more reliable than Docker login)
          echo "Logging into ACR..."
          az acr login --name $ACR_NAME
          
          # Push the images
          echo "Pushing image with tag: $(tag)"
          docker push $(containerRegistry)/$(imageRepository):$(tag)
          
          echo "Pushing image with latest tag"
          docker push $(containerRegistry)/$(imageRepository):latest
          
          echo "‚úÖ Push completed successfully!"
      continueOnError: false
    
    # Display success information
    - script: |
        echo "=== BUILD AND PUSH SUCCESSFUL ==="
        echo "‚úÖ Docker image built successfully"
        echo "‚úÖ Image pushed to: $(containerRegistry)/$(imageRepository):$(tag)"
        echo "‚úÖ Latest tag also created: $(containerRegistry)/$(imageRepository):latest"
        echo "üöÄ Image is ready for deployment using Azure CLI authentication"
      displayName: 'Build and Push Success Information'
      condition: succeeded()
