trigger:
  branches:
    include:
      - main

variables:
  # Azure Resources
  acrName: 'EventContainerTest'
  imageName: 'nacimeventscape'
  imageTag: '7'  # Static tag (update manually or use $(Build.BuildId) for dynamic)
  resourceGroup: 'EventBooking'
  appServiceName: 'EventScape'

  # Docker Configuration (Option 1: Dockerfile in ROOT)
  dockerfilePath: 'Dockerfile'  # Assumes Dockerfile is in the root of your repo
  buildContext: '.'             # Build context = root directory

  # Service Connections
  azureServiceConnection: 'eventbooking'               # ARM service connection
  acrServiceConnection: 'eventbookingdockerregistry'   # Docker Registry service connection

stages:

### STAGE 1: Build and Push to ACR
- stage: BuildAndPush
  displayName: 'Build and Push Docker Image'
  jobs:
    - job: Build
      displayName: 'Build and Push'
      pool:
        vmImage: 'ubuntu-latest'  # Linux agent (recommended for Docker)
      steps:

        # ===== DEBUGGING: Verify Repository Structure =====
        - script: |
            echo "Build.SourcesDirectory: $(Build.SourcesDirectory)"
            echo "Files in repo root:"
            ls -la $(Build.SourcesDirectory)
            echo "Checking for Dockerfile at: $(Build.SourcesDirectory)/$(dockerfilePath)"
            test -f $(Build.SourcesDirectory)/$(dockerfilePath) && echo "✅ Dockerfile FOUND" || echo "❌ Dockerfile MISSING"
          displayName: 'Debug: Check Dockerfile Exists'

        # ===== Build and Push to ACR =====
        - task: Docker@2
          displayName: 'Build and Push to ACR'
          inputs:
            containerRegistry: $(acrServiceConnection)
            repository: $(imageName)
            command: buildAndPush
            Dockerfile: $(dockerfilePath)  # Path relative to repo root
            buildContext: $(buildContext)   # Build from repo root
            tags: $(imageTag)

### STAGE 2: Deploy to Azure Web App
- stage: Deploy
  displayName: 'Deploy to Azure Web App'
  dependsOn: BuildAndPush
  condition: succeeded()  # Only deploy if build succeeds
  jobs:
    - job: DeployJob
      displayName: 'Deploy Container'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: AzureWebAppContainer@1
          displayName: 'Update Web App Container'
          inputs:
            azureSubscription: $(azureServiceConnection)
            appName: $(appServiceName)
            containers: $(acrName).azurecr.io/$(imageName):$(imageTag)
            appSettings: |
              -DOCKER_ENABLE_CI true  # Force Azure to pull the latest image