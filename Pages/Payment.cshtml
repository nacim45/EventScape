@page
@model soft20181_starter.Pages.PaymentModel
@{
    ViewData["Title"] = "Payment";
}

<div class="payment-container">
    <div class="payment-header">
        <div class="header-icon">
            <i class="fas fa-lock"></i>
        </div>
        <h2>Secure Payment</h2>
        <p class="secure-message">Your payment information is encrypted and secure</p>
        <div class="total-amount">
            <span class="amount-label">Total Amount:</span>
            <span class="amount-value">£@Model.TotalAmount.ToString("0.00")</span>
        </div>
    </div>

    <div class="payment-form">
        <h3><i class="fas fa-credit-card"></i> Pay with Card (Stripe)</h3>
        <form id="payment-form">
            <div class="form-section">
                <div class="form-group">
                    <label for="cardholder-name">
                        <i class="fas fa-user"></i> Cardholder Name
                    </label>
                    <input type="text" id="cardholder-name" class="form-control" placeholder="Name as it appears on card" required>
                </div>
                <div class="form-group">
                    <label for="card-element">
                        <i class="fas fa-hashtag"></i> Card Number
                    </label>
                    <div id="card-element" class="form-control"></div>
                    <div id="card-errors" class="text-danger" role="alert"></div>
                </div>

                <div class="form-row">
                    <div class="form-group half">
                        <label for="card-expiry">
                            <i class="fas fa-calendar-alt"></i> Expiry Date (MM/YY)
                        </label>
                        <div id="card-expiry" class="form-control"></div>
                    </div>
                    <div class="form-group half">
                        <label for="card-cvc">
                            <i class="fas fa-lock"></i> CVC
                        </label>
                        <div id="card-cvc" class="form-control"></div>
                    </div>
                </div>
            </div>

            <div class="form-section">
                <h3><i class="fas fa-user"></i> Billing Information</h3>
                <div class="form-group">
                    <label for="name">
                        <i class="fas fa-user-circle"></i> Full Name
                    </label>
                    <input type="text" id="name" class="form-control" value="@Model.UserName @Model.UserSurname" readonly>
                </div>
                <div class="form-group">
                    <label for="email">
                        <i class="fas fa-envelope"></i> Email Address
                    </label>
                    <input type="email" id="email" class="form-control" value="@Model.UserEmail" readonly>
                </div>
                <div class="form-group">
                    <label for="address">
                        <i class="fas fa-map-marker-alt"></i> Billing Address
                    </label>
                    <textarea id="address" class="form-control" rows="3" placeholder="Enter your billing address"></textarea>
                </div>
                <div class="form-row">
                    <div class="form-group half">
                        <label for="city">
                            <i class="fas fa-city"></i> City
                        </label>
                        <input type="text" id="city" class="form-control" placeholder="Enter your city">
                    </div>
                    <div class="form-group half">
                        <label for="postcode">
                            <i class="fas fa-map-pin"></i> Postcode
                        </label>
                        <input type="text" id="postcode" class="form-control" placeholder="Enter your postcode">
                    </div>
                </div>
            </div>

            <div class="payment-summary">
                <h3><i class="fas fa-receipt"></i> Payment Summary</h3>
                <div class="summary-item">
                    <span>Subtotal:</span>
                    <span>£@Model.TotalAmount.ToString("0.00")</span>
                </div>
                <div class="summary-item">
                    <span>Processing Fee:</span>
                    <span>£0.00</span>
                </div>
                <div class="summary-item total">
                    <span>Total:</span>
                    <span>£@Model.TotalAmount.ToString("0.00")</span>
                </div>
            </div>

            <div class="payment-methods">
                <div class="payment-method-icons">
                    <i class="fab fa-cc-visa"></i>
                    <i class="fab fa-cc-mastercard"></i>
                    <i class="fab fa-cc-amex"></i>
                    <i class="fab fa-cc-discover"></i>
                </div>
            </div>

            <button type="submit" id="submit-button" class="payment-button">
                <span id="button-text">Pay Now</span>
                <div id="spinner" class="spinner hidden"></div>
            </button>

            <div class="secure-payment-info">
                <i class="fas fa-shield-alt"></i>
                <p>Your payment is secured by Stripe's 256-bit SSL encryption</p>
            </div>
        </form>
        <hr style="margin: 40px 0; border-top: 2px solid #BFACB5;">
        <h3><i class="fab fa-paypal"></i> Or Pay with PayPal</h3>
        <div class="paypal-section">
            <div class="paypal-info">
                <p><i class="fas fa-shield-alt"></i> Secure payment powered by PayPal</p>
                <p><i class="fas fa-globe"></i> Accepted worldwide</p>
            </div>
            <div id="paypal-button-container" style="margin-top: 2rem;">
                <div id="paypal-loading" style="text-align: center; color: #666; font-style: italic;">
                    <i class="fas fa-spinner fa-spin"></i> Loading PayPal button...
                </div>
            </div>
            <!-- Fallback PayPal button for when SDK fails -->
            <div id="paypal-fallback" style="display: none; margin-top: 1rem;">
                <button id="paypal-fallback-btn" class="paypal-fallback-button" style="width: 100%; padding: 15px; background-color: #0070ba; color: white; border: none; border-radius: 8px; font-size: 16px; font-weight: bold; cursor: pointer;">
                    <i class="fab fa-paypal"></i> Pay with PayPal (Alternative Method)
                </button>
                <p style="text-align: center; color: #666; font-size: 12px; margin-top: 5px;">
                    This will redirect you to PayPal's secure payment page
                </p>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
        .payment-container {
            max-width: 800px;
            margin: 150px auto 50px;
            padding: 40px;
            background-color: #BFACB5;
            border-radius: 15px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            position: relative;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .payment-header {
            text-align: center;
            margin-bottom: 40px;
            padding-bottom: 30px;
            border-bottom: 2px solid #f0f0f0;
            width: 100%;
        }

        .header-icon {
            font-size: 40px;
            color: #522B5B;
            margin-bottom: 20px;
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .payment-header h2 {
            color: #522B5B;
            font-size: 32px;
            margin-bottom: 15px;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }

        .secure-message {
            color: #666;
            font-size: 16px;
            margin-bottom: 20px;
        }

        .total-amount {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            display: inline-block;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }

        .total-amount:hover {
            transform: translateY(-2px);
        }

        .payment-form {
            width: 100%;
            max-width: 700px;
            margin: 0 auto;
        }

        .form-section {
            margin-bottom: 30px;
            padding: 30px;
            background-color: #f8f9fa;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 100%;
            box-sizing: border-box;
            transition: transform 0.3s ease;
        }

        .form-section:hover {
            transform: translateY(-2px);
        }

        .form-section h3 {
            color: #522B5B;
            font-size: 20px;
            margin-bottom: 25px;
            font-weight: bold;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .form-section h3 i {
            color: #522B5B;
        }

        .form-group {
            margin-bottom: 25px;
            width: 100%;
        }

        .form-row {
            display: flex;
            gap: 20px;
            margin-bottom: 25px;
            width: 100%;
        }

        .form-group.half {
            flex: 1;
            min-width: 0;
        }

        .form-group label {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 12px;
            color: #522B5B;
            font-weight: 600;
            font-size: 16px;
        }

        .form-group label i {
            color: #522B5B;
        }

        .form-control {
            display: block;
            width: 100%;
            padding: 15px;
            font-size: 16px;
            border: 2px solid #BFACB5;
            border-radius: 8px;
            background-color: #fff;
            color: #333;
            transition: all 0.3s ease;
            box-sizing: border-box;
        }

        .form-control:focus {
            border-color: #522B5B;
            box-shadow: 0 0 0 3px rgba(82, 43, 91, 0.1);
            outline: none;
        }

        #card-element,
        #card-expiry,
        #card-cvc {
            padding: 15px;
            border: 2px solid #BFACB5;
            border-radius: 8px;
            background-color: #fff;
            transition: all 0.3s ease;
            width: 100%;
            box-sizing: border-box;
        }

        #card-element.StripeElement--focus,
        #card-expiry.StripeElement--focus,
        #card-cvc.StripeElement--focus {
            border-color: #522B5B;
            box-shadow: 0 0 0 3px rgba(82, 43, 91, 0.1);
        }

        .text-danger {
            color: #dc3545;
            font-size: 14px;
            margin-top: 10px;
            padding: 10px;
            background-color: #fff5f5;
            border-radius: 5px;
            border-left: 4px solid #dc3545;
        }

        .payment-summary {
            background-color: #f8f9fa;
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 30px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 100%;
            box-sizing: border-box;
            transition: transform 0.3s ease;
        }

        .payment-summary:hover {
            transform: translateY(-2px);
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            color: #666;
            font-size: 16px;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }

        .summary-item:last-child {
            border-bottom: none;
        }

        .summary-item.total {
            border-top: 2px solid #BFACB5;
            padding-top: 15px;
            margin-top: 15px;
            font-weight: bold;
            color: #522B5B;
            font-size: 18px;
        }

        .payment-methods {
            text-align: center;
            margin-bottom: 30px;
            width: 100%;
        }

        .payment-method-icons {
            display: flex;
            justify-content: center;
            gap: 20px;
            font-size: 32px;
            color: #666;
        }

        .payment-method-icons i {
            transition: transform 0.3s ease;
        }

        .payment-method-icons i:hover {
            transform: scale(1.2);
            color: #522B5B;
        }

        .payment-button {
            width: 100%;
            max-width: 700px;
            padding: 18px;
            background-color: #522B5B;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            margin-bottom: 20px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .payment-button:hover {
            background-color: #854F6C;
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(82, 43, 91, 0.2);
        }

        .payment-button:disabled {
            background-color: #BFACB5;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .spinner {
            display: inline-block;
            width: 24px;
            height: 24px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
            position: absolute;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
        }

        @@keyframes spin {
            to { transform: translateY(-50%) rotate(360deg); }
        }

        .hidden {
            display: none;
        }

        .secure-payment-info {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            color: #666;
            font-size: 14px;
            margin-top: 20px;
            width: 100%;
            text-align: center;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .secure-payment-info i {
            color: #28a745;
            font-size: 18px;
        }

        .amount-label {
            color: #522B5B;
            font-size: 18px;
            margin-right: 10px;
        }

        .amount-value {
            color: #522B5B;
            font-size: 24px;
            font-weight: bold;
        }

        /* PayPal Section Styling */
        .paypal-section {
            background-color: #f8f9fa;
            padding: 30px;
            border-radius: 10px;
            margin-top: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

        .paypal-section:hover {
            transform: translateY(-2px);
        }

        .paypal-info {
            text-align: center;
            margin-bottom: 20px;
        }

        .paypal-info p {
            color: #666;
            font-size: 14px;
            margin: 5px 0;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .paypal-info i {
            color: #522B5B;
        }

        #paypal-button-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 50px;
        }

        /* PayPal Button Custom Styling */
        .paypal-button {
            background-color: #0070ba !important;
            border-radius: 8px !important;
            font-family: inherit !important;
        }

        .paypal-button:hover {
            background-color: #005ea6 !important;
        }

        /* PayPal Success Message */
        .success-message {
            background-color: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            font-weight: bold;
            border: 1px solid #c3e6cb;
            animation: fadeIn 0.5s ease-in;
        }

        .success-message i {
            color: #28a745;
            margin-right: 8px;
        }

        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .payment-container {
                margin: 100px 20px 50px;
                padding: 20px;
                width: 90%;
            }

            .payment-form {
                width: 100%;
            }

            .form-section {
                padding: 20px;
            }

            .form-row {
                flex-direction: column;
                gap: 0;
            }

            .form-group.half {
                width: 100%;
            }

            .payment-button {
                width: 100%;
            }

            .payment-method-icons {
                font-size: 24px;
                gap: 15px;
            }
        }

        /* PayPal Fallback Button */
        .paypal-fallback-button {
            background-color: #0070ba !important;
            border-radius: 8px !important;
            font-family: inherit !important;
            transition: all 0.3s ease !important;
        }

        .paypal-fallback-button:hover {
            background-color: #005ea6 !important;
            transform: translateY(-2px) !important;
            box-shadow: 0 4px 8px rgba(0, 112, 186, 0.3) !important;
        }

        .paypal-fallback-button:disabled {
            background-color: #6c757d !important;
            cursor: not-allowed !important;
            transform: none !important;
            box-shadow: none !important;
        }
    </style>
}

@section Scripts {
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        // PayPal Integration with Multiple Fallback Methods
        let paypalLoaded = false;
        let paypalLoadAttempts = 0;
        const maxLoadAttempts = 3;

        // Method 1: Try loading PayPal SDK with multiple CDNs
        function loadPayPalSDK() {
            const clientId = '@Model.PayPalClientId';
            console.log("Attempting to load PayPal SDK with Client ID:", clientId);

            if (!clientId || clientId.trim() === '') {
                console.error("PayPal Client ID is missing or not configured");
                const container = document.getElementById('paypal-button-container');
                container.innerHTML = '<div style="color: red; padding: 20px; text-align: center; border: 1px solid red; border-radius: 8px; margin: 20px 0;"><h3>⚠️ PayPal Payment Unavailable</h3><p>PayPal payment is not configured. Please use the card payment option above.</p></div>';
                return;
            }

            // Try multiple CDN sources
            const paypalSources = [
                `https://www.paypal.com/sdk/js?client-id=${clientId}&currency=GBP&intent=capture`,
                `https://www.paypal.com/sdk/js?client-id=${clientId}&currency=GBP`,
                `https://www.paypalobjects.com/api/checkout.js?client-id=${clientId}&currency=GBP`
            ];

            tryLoadPayPal(paypalSources, 0);
        }

        function tryLoadPayPal(sources, index) {
            if (index >= sources.length || paypalLoadAttempts >= maxLoadAttempts) {
                console.error("All PayPal loading attempts failed");
                showPayPalError("Unable to load PayPal. Please try using the card payment option above.");
                return;
            }

            paypalLoadAttempts++;
            console.log(`Attempt ${paypalLoadAttempts}: Loading PayPal from ${sources[index]}`);

            const script = document.createElement('script');
            script.src = sources[index];
            script.async = true;
            
            script.onload = function() {
                console.log('PayPal SDK loaded successfully from:', sources[index]);
                paypalLoaded = true;
                initializePayPal();
            };
            
            script.onerror = function() {
                console.warn(`Failed to load PayPal from ${sources[index]}, trying next source...`);
                setTimeout(() => tryLoadPayPal(sources, index + 1), 1000);
            };

            document.head.appendChild(script);
        }

        function showPayPalError(message) {
            const container = document.getElementById('paypal-button-container');
            if (container) {
                container.innerHTML = `
                    <div style="color: #721c24; background-color: #f8d7da; border: 1px solid #f5c6cb; padding: 15px; border-radius: 5px; text-align: center;">
                        <i class="fas fa-exclamation-triangle"></i> ${message}
                    </div>
                `;
            }
            // Show fallback button
            showFallbackPayPal();
        }

        function showFallbackPayPal() {
            const fallback = document.getElementById('paypal-fallback');
            if (fallback) {
                fallback.style.display = 'block';
            }
        }

        // Fallback PayPal button handler
        function handleFallbackPayPal() {
            const fallbackBtn = document.getElementById('paypal-fallback-btn');
            if (fallbackBtn) {
                fallbackBtn.disabled = true;
                fallbackBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Redirecting to PayPal...';
                
                fetch('/api/paypal/redirect-payment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({
                        amount: @Model.TotalAmount
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.redirectUrl) {
                        window.location.href = data.redirectUrl;
                    } else {
                        throw new Error('No redirect URL received');
                    }
                })
                .catch(error => {
                    console.error('Fallback PayPal error:', error);
                    fallbackBtn.disabled = false;
                    fallbackBtn.innerHTML = '<i class="fab fa-paypal"></i> Pay with PayPal (Alternative Method)';
                    alert('Unable to redirect to PayPal. Please try the card payment option.');
                });
            }
        }

        // Add payment system status check
        function checkPaymentSystemStatus() {
            const stripePublicKey = '@Model.StripePublicKey';
            const paypalClientId = '@Model.PayPalClientId';
            
            console.log('Payment System Status Check:');
            console.log('- Stripe Public Key:', stripePublicKey ? 'Configured' : 'Not Configured');
            console.log('- PayPal Client ID:', paypalClientId ? 'Configured' : 'Not Configured');
            
            // Show loading indicator
            const loadingDiv = document.createElement('div');
            loadingDiv.id = 'payment-loading';
            loadingDiv.innerHTML = '<div style="text-align: center; padding: 20px;"><i class="fas fa-spinner fa-spin"></i> Initializing payment systems...</div>';
            document.body.appendChild(loadingDiv);
            
            // Remove loading indicator after 2 seconds
            setTimeout(() => {
                const loadingElement = document.getElementById('payment-loading');
                if (loadingElement) {
                    loadingElement.remove();
                }
            }, 2000);
        }
        
        // Call status check on page load
        checkPaymentSystemStatus();

        document.addEventListener('DOMContentLoaded', function() {
            // Validate that Stripe public key is configured
            const stripePublicKey = '@Model.StripePublicKey';
            console.log('Stripe Public Key:', stripePublicKey);
            
            if (!stripePublicKey || stripePublicKey.trim() === '') {
                console.error('Stripe public key is not configured');
                document.getElementById('payment-form').innerHTML = '<div style="color: red; padding: 20px; text-align: center; border: 1px solid red; border-radius: 8px; margin: 20px 0;"><h3>⚠️ Stripe Payment Unavailable</h3><p>Stripe payment is not configured. Please contact support or try PayPal below.</p></div>';
                return;
            }
            
            const stripe = Stripe(stripePublicKey);
            const elements = stripe.elements();
            
            // Custom styling for the card elements
            const style = {
                base: {
                    color: '#522B5B',
                    fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                    fontSmoothing: 'antialiased',
                    fontSize: '16px',
                    '::placeholder': {
                        color: '#BFACB5'
                    },
                    ':-webkit-autofill': {
                        color: '#522B5B'
                    }
                },
                invalid: {
                    color: '#dc3545',
                    iconColor: '#dc3545',
                    '::placeholder': {
                        color: '#dc3545'
                    }
                }
            };

            // Create card elements
            const cardElement = elements.create('cardNumber', { style });
            const cardExpiry = elements.create('cardExpiry', { style });
            const cardCvc = elements.create('cardCvc', { style });

            // Mount the elements
            cardElement.mount('#card-element');
            cardExpiry.mount('#card-expiry');
            cardCvc.mount('#card-cvc');

            const form = document.getElementById('payment-form');
            const submitButton = document.getElementById('submit-button');
            const spinner = document.getElementById('spinner');
            const buttonText = document.getElementById('button-text');

            // Real-time validation feedback
            const displayError = document.getElementById('card-errors');
            
            function handleCardError(event) {
                if (event.error) {
                    displayError.textContent = event.error.message;
                    submitButton.disabled = true;
                } else {
                    displayError.textContent = '';
                    submitButton.disabled = false;
                }
            }

            cardElement.addEventListener('change', handleCardError);
            cardExpiry.addEventListener('change', handleCardError);
            cardCvc.addEventListener('change', handleCardError);

            // Form submission
            form.addEventListener('submit', async function(event) {
                event.preventDefault();
                
                // Disable the submit button to prevent double submission
                submitButton.disabled = true;
                spinner.classList.remove('hidden');
                buttonText.textContent = 'Processing...';

                try {
                    // Create payment intent
                    const response = await fetch('/api/payment/create-payment-intent', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            amount: @Model.TotalAmount,
                            email: document.getElementById('email').value,
                            name: document.getElementById('name').value,
                            cardholderName: document.getElementById('cardholder-name').value,
                            address: document.getElementById('address').value,
                            city: document.getElementById('city').value,
                            postcode: document.getElementById('postcode').value
                        })
                    });

                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }

                    const data = await response.json();

                    // Handle 3D Secure authentication if required
                    if (data.requiresAction) {
                        const { error: actionError } = await stripe.handleCardAction(data.clientSecret);
                        if (actionError) {
                            throw actionError;
                        }
                    }

                    // Confirm the payment
                    const { error, paymentIntent } = await stripe.confirmCardPayment(data.clientSecret, {
                        payment_method: {
                            card: cardElement,
                            billing_details: {
                                name: document.getElementById('cardholder-name').value,
                                email: document.getElementById('email').value,
                                address: {
                                    line1: document.getElementById('address').value,
                                    city: document.getElementById('city').value,
                                    postal_code: document.getElementById('postcode').value
                                }
                            }
                        }
                    });

                    if (error) {
                        throw error;
                    }

                    if (paymentIntent.status === 'succeeded') {
                        // Send email with ticket
                        await fetch('/api/payment/send-ticket-email', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                email: document.getElementById('email').value,
                                name: document.getElementById('name').value,
                                paymentIntentId: paymentIntent.id,
                                amount: @Model.TotalAmount,
                                address: document.getElementById('address').value,
                                city: document.getElementById('city').value,
                                postcode: document.getElementById('postcode').value
                            })
                        });

                        // Show success message before redirect
                        buttonText.textContent = 'Payment Successful!';
                        setTimeout(() => {
                            window.location.href = '/PaymentSuccess?paymentIntentId=' + paymentIntent.id;
                        }, 1000);
                    }
                } catch (error) {
                    displayError.textContent = error.message;
                    submitButton.disabled = false;
                    spinner.classList.add('hidden');
                    buttonText.textContent = 'Pay Now';
                }
            });

            // Initialize PayPal after Stripe is set up
            loadPayPalSDK();

            // Add event listener for fallback PayPal button
            const fallbackBtn = document.getElementById('paypal-fallback-btn');
            if (fallbackBtn) {
                fallbackBtn.addEventListener('click', handleFallbackPayPal);
            }
        });

        // PayPal Integration Function
        function initializePayPal() {
            console.log('Initializing PayPal integration...');
            console.log('PayPal Client ID:', '@Model.PayPalClientId');
            
            // Clear loading indicator
            const loadingElement = document.getElementById('paypal-loading');
            if (loadingElement) {
                loadingElement.remove();
            }
            
            // Check which PayPal API is available
            if (typeof paypal !== 'undefined') {
                if (paypal.Buttons) {
                    // New PayPal Buttons API
                    console.log('Using PayPal Buttons API');
                    createPayPalButtons();
                } else if (paypal.Button) {
                    // Old PayPal Checkout API
                    console.log('Using PayPal Checkout API');
                    createPayPalCheckout();
                } else {
                    console.error('PayPal API not recognized');
                    showPayPalError("PayPal integration error. Please try the alternative payment method.");
                    showFallbackPayPal();
                }
            } else {
                console.error('PayPal object not found');
                showPayPalError("PayPal not available. Please try the alternative payment method.");
                showFallbackPayPal();
            }
        }
        
        function createPayPalButtons() {
            // Set a timeout to check if the button renders
            setTimeout(function() {
                const container = document.getElementById('paypal-button-container');
                if (container && container.innerHTML.trim() === '') {
                    console.error('PayPal button failed to render');
                    container.innerHTML = '<div style="color: red; padding: 20px; text-align: center;">PayPal button failed to load. Please try the alternative payment method.</div>';
                    showFallbackPayPal();
                }
            }, 5000);
            
            paypal.Buttons({
                // Sets up the transaction when a payment button is clicked
                createOrder: function(data, actions) {
                    console.log('Creating PayPal order for amount: @Model.TotalAmount.ToString("0.00")');
                    
                    return fetch('/api/paypal/create-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: JSON.stringify({
                            amount: Number(@Model.TotalAmount).toFixed(2),
                            currency: 'GBP'
                        })
                    })
                    .then(function(response) {
                        console.log('PayPal create order response status:', response.status);
                        
                        if (!response.ok) {
                            return response.json().then(function(errorData) {
                                console.error('PayPal create order error:', errorData);
                                throw new Error('Failed to create PayPal order: ' + (errorData.error || response.statusText));
                            });
                        }
                        
                        return response.json();
                    })
                    .then(function(orderData) {
                        console.log('PayPal order created successfully:', orderData);
                        
                        if (!orderData.id) {
                            throw new Error('PayPal order ID not found in response');
                        }
                        
                        return orderData.id;
                    })
                    .catch(function(error) {
                        console.error('PayPal create order exception:', error);
                        alert('Error creating PayPal order: ' + error.message);
                        throw error;
                    });
                },

                // Finalize the transaction after payer approval
                onApprove: function(data, actions) {
                    console.log('PayPal order approved:', data);
                    
                    return fetch('/api/paypal/capture-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: JSON.stringify({
                            orderId: data.orderID
                        })
                    })
                    .then(function(response) {
                        console.log('PayPal capture response status:', response.status);
                        
                        if (!response.ok) {
                            return response.json().then(function(errorData) {
                                console.error('PayPal capture error:', errorData);
                                throw new Error('Failed to capture PayPal payment: ' + (errorData.error || response.statusText));
                            });
                        }
                        
                        return response.json();
                    })
                    .then(function(captureData) {
                        console.log('PayPal payment captured successfully:', captureData);
                        
                        if (captureData.status === "COMPLETED") {
                            // Show success message
                            const buttonContainer = document.getElementById('paypal-button-container');
                            buttonContainer.innerHTML = '<div class="success-message"><i class="fas fa-check-circle"></i> Payment Successful!</div>';
                            
                            // Redirect to success page after a short delay
                            setTimeout(function() {
                                window.location.href = '/PaymentSuccess?paymentMethod=paypal&orderId=' + data.orderID;
                            }, 2000);
                        } else {
                            console.error('PayPal payment not completed. Status:', captureData.status);
                            alert('Payment not completed. Status: ' + captureData.status);
                        }
                    })
                    .catch(function(error) {
                        console.error('PayPal capture exception:', error);
                        alert('Error processing PayPal payment: ' + error.message);
                    });
                },

                // Handle errors during the payment process
                onError: function(err) {
                    console.error('PayPal button error:', err);
                    alert('PayPal error: ' + err.message);
                },

                // Handle cancellation
                onCancel: function(data) {
                    console.log('PayPal payment cancelled:', data);
                    alert('Payment was cancelled. You can try again or use a different payment method.');
                },

                // Handle when the payment window is closed
                onClick: function(data, actions) {
                    console.log('PayPal button clicked');
                }
            }).render('#paypal-button-container')
            .then(function() {
                console.log('PayPal button rendered successfully');
                const container = document.getElementById('paypal-button-container');
                // Clear any loading message
                if (container.innerHTML.includes('Loading PayPal button')) {
                    container.innerHTML = '';
                }
            })
            .catch(function(error) {
                console.error('PayPal button render error:', error);
                document.getElementById('paypal-button-container').innerHTML = 
                    '<div style="color: red; padding: 20px; text-align: center;">Error loading PayPal button: ' + error.message + '</div>';
                showFallbackPayPal();
            });
        }
        
        function createPayPalCheckout() {
            // Old PayPal Checkout API implementation
            console.log('Creating PayPal Checkout button');
            
            paypal.Button.render({
                env: 'sandbox', // Change to 'production' for live
                client: {
                    sandbox: '@Model.PayPalClientId'
                },
                payment: function(data, actions) {
                    return actions.payment.create({
                        transactions: [{
                            amount: {
                                total: '@Model.TotalAmount.ToString("0.00")',
                                currency: 'GBP'
                            },
                            description: 'EventScape Event Payment'
                        }]
                    });
                },
                onAuthorize: function(data, actions) {
                    return actions.payment.execute().then(function(payment) {
                        console.log('PayPal payment completed:', payment);
                        
                        // Show success message
                        const buttonContainer = document.getElementById('paypal-button-container');
                        buttonContainer.innerHTML = '<div class="success-message"><i class="fas fa-check-circle"></i> Payment Successful!</div>';
                        
                        // Redirect to success page after a short delay
                        setTimeout(function() {
                            window.location.href = '/PaymentSuccess?paymentMethod=paypal&orderId=' + payment.id;
                        }, 2000);
                    });
                },
                onCancel: function(data) {
                    console.log('PayPal payment cancelled');
                    alert('Payment was cancelled. You can try again or use a different payment method.');
                },
                onError: function(err) {
                    console.error('PayPal error:', err);
                    alert('PayPal error: ' + err.message);
                }
            }, '#paypal-button-container');
        }
    </script>
} 