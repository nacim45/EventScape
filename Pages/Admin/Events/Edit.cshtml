@page "{id:int}"
@model soft20181_starter.Pages.Admin.Events.EditModel
@{
    ViewData["Title"] = "Edit Event - EventScape";
    Layout = "_Layout";
}

<div class="container my-5">
    <div class="featured-events-header">
        <h2 class="featured-title">Edit events results</h2>
    </div>
    
    <div class="admin-navigation-container">
        <a href="/Admin" class="admin-nav-btn">
                    <i class="fas fa-tachometer-alt"></i> Dashboard
                </a>
    </div>

    <div class="edit-form-container">
        <div class="event-title">@Model.Event?.title</div>

        <form method="post" class="event-edit-form" enctype="multipart/form-data" novalidate>
            <input type="hidden" asp-for="Event.id" />
            <input type="hidden" asp-for="Event.title" />
            @Html.AntiForgeryToken()

            <div class="form-grid">
                <div class="form-group">
                    <label>Description</label>
                    <textarea asp-for="Event.description" class="form-control" required minlength="10" rows="4"></textarea>
                    <div class="invalid-feedback">Please provide a description (at least 10 characters).</div>
                    </div>
                    
                <div class="form-group">
                    <label>Location</label>
                    <input asp-for="Event.location" class="form-control" required />
                    <div class="invalid-feedback">Please provide a location.</div>
                        </div>
                        
                <div class="form-group">
                    <label>Date</label>
                    <input asp-for="Event.date" type="date" class="form-control" required min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                    <div class="invalid-feedback">Please select a future date.</div>
                            </div>
                            
                <div class="form-group">
                    <label>Time</label>
                    <input asp-for="EventStartTime" type="time" class="form-control" />
                    <div class="invalid-feedback">Please provide a valid time.</div>
                            </div>
                            
                <div class="form-group">
                    <label>Price</label>
                    <input asp-for="Event.price" class="form-control" required pattern="^(\d+(\.\d{1,2})?|Free)$" />
                    <div class="invalid-feedback">Price must be a number (e.g., 10.00) or 'Free'.</div>
                            </div>
                            
                <div class="form-group">
                    <label>Tag</label>
                    <input asp-for="EventTags" class="form-control" />
                    <div class="invalid-feedback">Please provide valid tags.</div>
                        </div>
                        
                <div class="form-group">
                    <label>Capacity</label>
                    <input asp-for="EventCapacity" type="number" class="form-control" min="1" />
                    <div class="invalid-feedback">Capacity must be a positive number.</div>
                                    </div>
                                </div>
                                
            <div class="confirmation-message">
                Are you sure you want to save these event details?
                    </div>
                    
            <div class="form-actions">
                <button type="submit" class="btn-edit">Edit Event</button>
                <a asp-page="/Admin" class="btn-cancel">Cancel</a>
            </div>
        </form>

        <a asp-page="/Admin/Events/SearchForEdit" class="back-to-search">
            <i class="fas fa-arrow-left"></i> Back to Search
        </a>
        </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/style.css">
    <link rel="stylesheet" href="~/css/admin.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .featured-title {
            display: inline-block;
            background-color: #522B5B;
            color: white;
            padding: 15px 30px;
            border-radius: 8px;
            font-weight: bold;
            font-size: 28px;
            margin: 40px auto;
            text-align: center;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }
        
        .featured-events-header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .admin-navigation-container {
            display: flex;
            justify-content: center;
            margin: 30px 0;
        }

        .admin-nav-btn {
            display: inline-flex;
            align-items: center;
            padding: 12px 24px;
            background-color: #522B5B;
            color: white;
            border-radius: 8px;
            text-decoration: none;
            font-weight: bold;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .admin-nav-btn:hover {
            background-color: #854F6C;
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
            color: white;
            text-decoration: none;
        }
        
        .admin-nav-btn i {
            margin-right: 8px;
            font-size: 16px;
        }

        .edit-form-container {
            max-width: 800px;
            margin: 30px auto;
            padding: 30px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        .event-title {
            color: #522B5B;
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 30px;
            text-align: center;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            color: #522B5B;
            font-weight: 600;
            margin-bottom: 8px;
        }
        
        .form-control {
            width: 100%;
            padding: 12px;
            border: 2px solid #BFACB5;
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        
        .form-control:focus {
            border-color: #522B5B;
            box-shadow: 0 0 0 4px rgba(82, 43, 91, 0.1);
            outline: none;
        }

        .confirmation-message {
            text-align: center;
            color: #522B5B;
            font-weight: bold;
            margin: 30px 0;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .form-actions {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 30px;
        }

        .btn-edit {
            padding: 12px 30px;
            background-color: #522B5B;
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-edit:hover {
            background-color: #854F6C;
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(82, 43, 91, 0.2);
        }
        
        .btn-cancel {
            padding: 12px 30px;
            background-color: #f8f9fa;
            color: #6c757d;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
        }
        
        .btn-cancel:hover {
            background-color: #e9ecef;
            color: #495057;
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
            text-decoration: none;
        }

        .back-to-search {
            display: block;
            text-align: center;
            color: #6c757d;
            text-decoration: none;
            margin-top: 20px;
            transition: all 0.3s ease;
        }

        .back-to-search:hover {
            color: #522B5B;
            text-decoration: none;
            transform: translateY(-2px);
        }

        .invalid-feedback {
            display: none;
            color: #dc3545;
            font-size: 14px;
            margin-top: 5px;
        }

        .form-control.is-invalid {
            border-color: #dc3545;
            background-color: #fff8f8;
        }

        .form-control.is-invalid ~ .invalid-feedback {
            display: block;
        }

        @@media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }

            .form-actions {
                flex-direction: column;
            }
            
            .btn-edit,
            .btn-cancel {
                width: 100%;
            }
        }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('.event-edit-form');
            const inputs = form.querySelectorAll('.form-control');
            const submitButton = form.querySelector('button[type="submit"]');
            const originalButtonText = submitButton.innerHTML;
            
            // Add error handling for the entire page
            window.addEventListener('error', function(e) {
                console.error('Page Error:', e.error);
                showErrorMessage('An unexpected error occurred. Please try again.');
            });

            // Add error handling for unhandled promise rejections
            window.addEventListener('unhandledrejection', function(e) {
                console.error('Unhandled Promise Rejection:', e.reason);
                showErrorMessage('An unexpected error occurred. Please try again.');
            });
            
            form.addEventListener('submit', async function(e) {
                if (!form.checkValidity()) {
                    e.preventDefault();
                    
                    const invalidInputs = form.querySelectorAll(':invalid');
                    invalidInputs.forEach(input => {
                        input.classList.add('is-invalid');
                        input.classList.add('shake');
                        setTimeout(() => input.classList.remove('shake'), 500);
                    });
                    
                    if (invalidInputs.length > 0) {
                        invalidInputs[0].focus();
                        invalidInputs[0].scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                    return;
                }

                try {
                    // Show loading state
                    submitButton.disabled = true;
                    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
                } catch (error) {
                    console.error('Error:', error);
                    showErrorMessage('An error occurred while saving. Please try again.');
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonText;
                }
            });
            
            inputs.forEach(input => {
                input.addEventListener('focus', function() {
                    this.classList.remove('is-invalid');
                });
                
                input.addEventListener('input', function() {
                    if (this.checkValidity()) {
                        this.classList.remove('is-invalid');
                    }
                });
            });

            // Function to show error message
            function showErrorMessage(message) {
                const errorDiv = document.createElement('div');
                errorDiv.className = 'alert alert-danger mt-3';
                errorDiv.role = 'alert';
                errorDiv.innerHTML = `
                    <i class="fas fa-exclamation-circle"></i>
                    <span class="ml-2">${message}</span>
                `;
                form.insertBefore(errorDiv, form.firstChild);
                
                setTimeout(() => {
                    errorDiv.remove();
                }, 5000);
            }

            // Handle any error messages from the server
            const errorMessage = '@TempData["ErrorMessage"]';
            if (errorMessage) {
                showErrorMessage(errorMessage);
            }
        });
    </script>
    <style>
        @@keyframes shake {
            0%, 100% { transform: translateX(0); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
            20%, 40%, 60%, 80% { transform: translateX(5px); }
        }
        
        .shake {
            animation: shake 0.5s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
        }

        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border: 1px solid transparent;
            border-radius: 4px;
        }

        .alert-danger {
            color: #721c24;
            background-color: #f8d7da;
            border-color: #f5c6cb;
        }

        .alert i {
            margin-right: 10px;
        }

        .fa-spinner {
            margin-right: 8px;
        }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Form validation
            const form = document.querySelector('.admin-form');
            const startTimeInput = document.getElementById('EventStartTime');
            const endTimeInput = document.getElementById('EventEndTime');
            
            form.addEventListener('submit', function(e) {
                if (!form.checkValidity()) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // Add validation styling
                    const invalidInputs = form.querySelectorAll(':invalid');
                    invalidInputs.forEach(input => {
                        input.classList.add('is-invalid');
                        input.classList.add('shake');
                        setTimeout(() => input.classList.remove('shake'), 500);
                    });
                    
                    // Scroll to first invalid input
                    if (invalidInputs.length > 0) {
                        invalidInputs[0].focus();
                        invalidInputs[0].scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }
                
                // Validate end time is after start time
                if (startTimeInput.value && endTimeInput.value) {
                    if (endTimeInput.value <= startTimeInput.value) {
                        e.preventDefault();
                        endTimeInput.classList.add('is-invalid');
                        endTimeInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }
                
                form.classList.add('was-validated');
            });
            
            // Image upload handling
            const uploadInput = document.getElementById('UploadedImages');
            const uploadContainer = document.querySelector('.image-upload-container');
            const previewContainer = document.getElementById('image-preview-container');
            
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                uploadContainer.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            ['dragenter', 'dragover'].forEach(eventName => {
                uploadContainer.addEventListener(eventName, () => {
                    uploadContainer.classList.add('dragover');
                });
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                uploadContainer.addEventListener(eventName, () => {
                    uploadContainer.classList.remove('dragover');
                });
            });
            
            uploadInput.addEventListener('change', handleFiles);
            uploadContainer.addEventListener('drop', e => {
                const dt = e.dataTransfer;
                uploadInput.files = dt.files;
                handleFiles();
            });
            
            function handleFiles() {
                const files = Array.from(uploadInput.files).slice(0, 3);
                previewContainer.innerHTML = '';
                
                files.forEach(file => {
                    if (!file.type.match('image.*')) return;
                    
                    const reader = new FileReader();
                    reader.onload = e => {
                        const preview = document.createElement('div');
                        preview.className = 'image-preview';
                        
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        
                        const removeBtn = document.createElement('button');
                        removeBtn.className = 'remove-image';
                        removeBtn.innerHTML = '<i class="fas fa-times"></i>';
                        removeBtn.onclick = () => preview.remove();
                        
                        preview.appendChild(img);
                        preview.appendChild(removeBtn);
                        previewContainer.appendChild(preview);
                    };
                    reader.readAsDataURL(file);
                });
                
                if (files.length > 0) {
                    const overlaySpan = uploadContainer.querySelector('.image-upload-overlay span');
                    overlaySpan.textContent = `${files.length} file(s) selected`;
                }
            }
            
            // Input focus effects
            const inputs = form.querySelectorAll('.admin-form-input');
            inputs.forEach(input => {
                input.addEventListener('focus', () => {
                    input.parentElement.classList.add('is-focused');
                });
                
                input.addEventListener('blur', () => {
                    input.parentElement.classList.remove('is-focused');
                    if (input.checkValidity()) {
                        input.classList.remove('is-invalid');
                    }
                });
            });
        });
    </script>
    <style>
        /* Animation styles */
        @@keyframes shake {
            0%, 100% { transform: translateX(0); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
            20%, 40%, 60%, 80% { transform: translateX(5px); }
        }
        
        .shake {
            animation: shake 0.5s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
        }
        
        /* Focus effects */
        .is-focused .admin-form-label {
            color: #854F6C;
            transform: translateX(5px);
            transition: all 0.3s ease;
        }
        
        .is-focused .admin-form-input {
            border-color: #522B5B;
            box-shadow: 0 0 0 4px rgba(82, 43, 91, 0.1);
            background-color: #fff;
        }
        
        /* Validation styles */
        .was-validated .admin-form-input:invalid {
            border-color: #dc3545;
            background-color: #fff8f8;
        }
        
        .was-validated .admin-form-input:valid {
            border-color: #28a745;
            background-color: #f8fff8;
        }
        
        .invalid-feedback {
            display: none;
            color: #dc3545;
            font-size: 14px;
            margin-top: 8px;
            font-weight: 500;
        }
        
        .was-validated .admin-form-input:invalid ~ .invalid-feedback {
            display: block;
        }
    </style>
    }
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/style.css">
    <link rel="stylesheet" href="~/css/admin.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .featured-title {
            display: inline-block;
            background-color: #522B5B;
            color: white;
            padding: 15px 30px;
            border-radius: 8px;
            font-weight: bold;
            font-size: 28px;
            margin: 40px auto;
            text-align: center;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }
        
        .featured-events-header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .admin-navigation-container {
            display: flex;
            justify-content: center;
            margin: 30px 0;
        }

        .admin-nav-btn {
            display: inline-flex;
            align-items: center;
            padding: 12px 24px;
            background-color: #522B5B;
            color: white;
            border-radius: 8px;
            text-decoration: none;
            font-weight: bold;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .admin-nav-btn:hover {
            background-color: #854F6C;
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
            color: white;
            text-decoration: none;
        }
        
        .admin-nav-btn i {
            margin-right: 8px;
            font-size: 16px;
        }

        .edit-form-container {
            max-width: 800px;
            margin: 30px auto;
            padding: 30px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        .event-title {
            color: #522B5B;
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 30px;
            text-align: center;
        }
        
        .edit-form {
            margin-bottom: 30px;
        }

        .form-row {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            gap: 20px;
        }

        .form-group {
            flex: 1;
        }

        .form-group label {
            display: block;
            color: #522B5B;
            font-weight: 600;
            margin-bottom: 8px;
        }
        
        .form-control {
            width: 100%;
            padding: 12px;
            border: 2px solid #BFACB5;
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        
        .form-control:focus {
            border-color: #522B5B;
            box-shadow: 0 0 0 4px rgba(82, 43, 91, 0.1);
            outline: none;
        }

        .form-value {
            flex: 1;
            padding: 12px;
            background: #f8f9fa;
            border-radius: 8px;
            color: #6c757d;
        }

        .confirmation-message {
            text-align: center;
            color: #522B5B;
            font-weight: bold;
            margin: 30px 0;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .form-actions {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 30px;
        }

        .btn-edit {
            padding: 12px 30px;
            background-color: #522B5B;
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-edit:hover {
            background-color: #854F6C;
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(82, 43, 91, 0.2);
        }
        
        .btn-cancel {
            padding: 12px 30px;
            background-color: #f8f9fa;
            color: #6c757d;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
        }
        
        .btn-cancel:hover {
            background-color: #e9ecef;
            color: #495057;
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
            text-decoration: none;
        }

        .back-to-search {
            display: block;
            text-align: center;
            color: #6c757d;
            text-decoration: none;
            margin-top: 20px;
            transition: all 0.3s ease;
        }

        .back-to-search:hover {
            color: #522B5B;
            text-decoration: none;
            transform: translateY(-2px);
        }

        @@media (max-width: 768px) {
            .form-row {
                flex-direction: column;
                gap: 15px;
            }
            
            .form-actions {
                flex-direction: column;
            }
            
            .btn-edit,
            .btn-cancel {
                width: 100%;
            }
        }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('.event-edit-form');
            const inputs = form.querySelectorAll('.form-control');
            
            // Add validation and animation
            form.addEventListener('submit', function(e) {
                if (!form.checkValidity()) {
                    e.preventDefault();
                    
                    const invalidInputs = form.querySelectorAll(':invalid');
                    invalidInputs.forEach(input => {
                        input.classList.add('is-invalid');
                        input.classList.add('shake');
                        setTimeout(() => input.classList.remove('shake'), 500);
                    });
                    
                    if (invalidInputs.length > 0) {
                        invalidInputs[0].focus();
                        invalidInputs[0].scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }
            });
            
            // Add input effects
            inputs.forEach(input => {
                input.addEventListener('focus', function() {
                    this.parentElement.classList.add('is-focused');
                });
                
                input.addEventListener('blur', function() {
                    this.parentElement.classList.remove('is-focused');
                    if (this.checkValidity()) {
                        this.classList.remove('is-invalid');
                    }
                });
                
                input.addEventListener('input', function() {
                    if (this.checkValidity()) {
                        this.classList.remove('is-invalid');
                    }
                });
            });
            
            // Add button effects
            const buttons = document.querySelectorAll('.btn-edit, .btn-cancel');
            buttons.forEach(button => {
                button.addEventListener('mousedown', function() {
                    this.style.transform = 'scale(0.95)';
                });
                
                button.addEventListener('mouseup', function() {
                    this.style.transform = '';
                });
                
                button.addEventListener('mouseleave', function() {
                    this.style.transform = '';
                });
            });
        });
    </script>
    <style>
        .is-invalid {
            border-color: #dc3545 !important;
            background-color: #fff8f8 !important;
        }
        
        .is-focused .form-control {
            border-color: #522B5B;
            box-shadow: 0 0 0 4px rgba(82, 43, 91, 0.1);
        }
        
        @@keyframes shake {
            0%, 100% { transform: translateX(0); }
            10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
            20%, 40%, 60%, 80% { transform: translateX(5px); }
        }
        
        .shake {
            animation: shake 0.5s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
        }
    </style>
} 